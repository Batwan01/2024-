backend_args = None
checkpoint_config = dict(interval=1)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                1280,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(size_divisor=32, type='Pad'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(
        filter_empty_gt=False,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(flip_ratio=0.5, type='RandomFlip'),
            dict(
                policies=[
                    [
                        dict(
                            img_scale=[
                                (
                                    480,
                                    2048,
                                ),
                                (
                                    512,
                                    2048,
                                ),
                                (
                                    544,
                                    2048,
                                ),
                                (
                                    576,
                                    2048,
                                ),
                                (
                                    608,
                                    2048,
                                ),
                                (
                                    640,
                                    2048,
                                ),
                                (
                                    672,
                                    2048,
                                ),
                                (
                                    704,
                                    2048,
                                ),
                                (
                                    736,
                                    2048,
                                ),
                                (
                                    768,
                                    2048,
                                ),
                                (
                                    800,
                                    2048,
                                ),
                                (
                                    832,
                                    2048,
                                ),
                                (
                                    864,
                                    2048,
                                ),
                                (
                                    896,
                                    2048,
                                ),
                                (
                                    928,
                                    2048,
                                ),
                                (
                                    960,
                                    2048,
                                ),
                                (
                                    992,
                                    2048,
                                ),
                                (
                                    1024,
                                    2048,
                                ),
                                (
                                    1056,
                                    2048,
                                ),
                                (
                                    1088,
                                    2048,
                                ),
                                (
                                    1120,
                                    2048,
                                ),
                                (
                                    1152,
                                    2048,
                                ),
                                (
                                    1184,
                                    2048,
                                ),
                                (
                                    1216,
                                    2048,
                                ),
                                (
                                    1248,
                                    2048,
                                ),
                                (
                                    1280,
                                    2048,
                                ),
                            ],
                            keep_ratio=True,
                            multiscale_mode='value',
                            type='Resize'),
                    ],
                    [
                        dict(
                            img_scale=[
                                (
                                    400,
                                    4200,
                                ),
                                (
                                    500,
                                    4200,
                                ),
                                (
                                    600,
                                    4200,
                                ),
                            ],
                            keep_ratio=True,
                            multiscale_mode='value',
                            type='Resize'),
                        dict(
                            allow_negative_crop=True,
                            crop_size=(
                                384,
                                600,
                            ),
                            crop_type='absolute_range',
                            type='RandomCrop'),
                        dict(
                            img_scale=[
                                (
                                    480,
                                    2048,
                                ),
                                (
                                    512,
                                    2048,
                                ),
                                (
                                    544,
                                    2048,
                                ),
                                (
                                    576,
                                    2048,
                                ),
                                (
                                    608,
                                    2048,
                                ),
                                (
                                    640,
                                    2048,
                                ),
                                (
                                    672,
                                    2048,
                                ),
                                (
                                    704,
                                    2048,
                                ),
                                (
                                    736,
                                    2048,
                                ),
                                (
                                    768,
                                    2048,
                                ),
                                (
                                    800,
                                    2048,
                                ),
                                (
                                    832,
                                    2048,
                                ),
                                (
                                    864,
                                    2048,
                                ),
                                (
                                    896,
                                    2048,
                                ),
                                (
                                    928,
                                    2048,
                                ),
                                (
                                    960,
                                    2048,
                                ),
                                (
                                    992,
                                    2048,
                                ),
                                (
                                    1024,
                                    2048,
                                ),
                                (
                                    1056,
                                    2048,
                                ),
                                (
                                    1088,
                                    2048,
                                ),
                                (
                                    1120,
                                    2048,
                                ),
                                (
                                    1152,
                                    2048,
                                ),
                                (
                                    1184,
                                    2048,
                                ),
                                (
                                    1216,
                                    2048,
                                ),
                                (
                                    1248,
                                    2048,
                                ),
                                (
                                    1280,
                                    2048,
                                ),
                            ],
                            keep_ratio=True,
                            multiscale_mode='value',
                            override=True,
                            type='Resize'),
                    ],
                ],
                type='AutoAugment'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(size_divisor=32, type='Pad'),
            dict(type='DefaultFormatBundle'),
            dict(keys=[
                'img',
                'gt_bboxes',
                'gt_labels',
            ], type='Collect'),
        ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                1280,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(size_divisor=32, type='Pad'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    workers_per_gpu=1)
data_root = '../../tld_db'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=1, max_keep_ckpts=1, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=1, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
device = 'cuda'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(metric='bbox')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
lambda_2 = 2.0
load_from = '../checkpoints/co-detr-vit-large-coco.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr_config = dict(
    policy='step',
    step=[
        9,
        15,
    ],
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.01)
metainfo = dict(
    classes=(
        'veh_go',
        'veh_goLeft',
        'veh_noSign',
        'veh_stop',
        'veh_stopLeft',
        'veh_stopWarning',
        'veh_warning',
        'ped_go',
        'ped_noSign',
        'ped_stop',
        'bus_go',
        'bus_noSign',
        'bus_stop',
        'bus_warning',
    ))
model = dict(
    backbone=dict(
        depth=24,
        drop_path_rate=0.4,
        embed_dim=1024,
        frozen_stages=-1,
        img_size=1536,
        init_cfg=None,
        mlp_ratio=2.6666666666666665,
        num_heads=16,
        patch_size=16,
        pretrain_img_size=512,
        qkv_bias=True,
        residual_block_indexes=[],
        type='ViT',
        use_act_checkpoint=True,
        window_block_indexes=[
            0,
            1,
            2,
            4,
            5,
            6,
            8,
            9,
            10,
            12,
            13,
            14,
            16,
            17,
            18,
            20,
            21,
            22,
            24,
            25,
            26,
        ],
        window_size=24),
    bbox_head=[
        dict(
            anchor_generator=dict(
                octave_base_scale=8,
                ratios=[
                    1.0,
                ],
                scales_per_octave=1,
                strides=[
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                ],
                type='AnchorGenerator'),
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            feat_channels=256,
            in_channels=256,
            loss_bbox=dict(loss_weight=24.0, type='GIoULoss'),
            loss_centerness=dict(
                loss_weight=12.0, type='CrossEntropyLoss', use_sigmoid=True),
            loss_cls=dict(
                alpha=0.25,
                gamma=2.0,
                loss_weight=12.0,
                type='FocalLoss',
                use_sigmoid=True),
            num_classes=80,
            stacked_convs=1,
            type='CoATSSHead'),
    ],
    neck=dict(
        in_channels=[
            1024,
        ],
        num_outs=5,
        out_channels=256,
        type='SFP',
        use_act_checkpoint=False,
        use_p2=True),
    query_head=dict(
        as_two_stage=True,
        dn_cfg=dict(
            group_cfg=dict(dynamic=True, num_dn_queries=300, num_groups=None),
            noise_scale=dict(box=0.4, label=0.5),
            type='CdnQueryGenerator'),
        in_channels=2048,
        loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='QualityFocalLoss',
            use_sigmoid=True),
        loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
        mixed_selection=True,
        num_classes=80,
        num_feature_levels=5,
        num_query=1500,
        positional_encoding=dict(
            normalize=True,
            num_feats=128,
            temperature=20,
            type='SinePositionalEncoding'),
        sync_cls_avg_factor=True,
        transformer=dict(
            decoder=dict(
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    attn_cfgs=[
                        dict(
                            dropout=0.0,
                            embed_dims=256,
                            num_heads=8,
                            type='MultiheadAttention'),
                        dict(
                            dropout=0.0,
                            embed_dims=256,
                            num_levels=5,
                            type='MultiScaleDeformableAttention'),
                    ],
                    feedforward_channels=2048,
                    ffn_dropout=0.0,
                    operation_order=(
                        'self_attn',
                        'norm',
                        'cross_attn',
                        'norm',
                        'ffn',
                        'norm',
                    ),
                    type='DetrTransformerDecoderLayer'),
                type='DinoTransformerDecoder'),
            encoder=dict(
                num_layers=6,
                transformerlayers=dict(
                    attn_cfgs=dict(
                        dropout=0.0,
                        embed_dims=256,
                        num_levels=5,
                        type='MultiScaleDeformableAttention'),
                    feedforward_channels=2048,
                    ffn_dropout=0.0,
                    operation_order=(
                        'self_attn',
                        'norm',
                        'ffn',
                        'norm',
                    ),
                    type='BaseTransformerLayer'),
                type='DetrTransformerEncoder',
                with_cp=6),
            num_co_heads=2,
            num_feature_levels=5,
            type='CoDinoTransformer',
            with_coord_feat=False,
            with_pos_coord=True),
        type='CoDINOHead',
        with_box_refine=True),
    roi_head=[
        dict(
            bbox_head=dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                conv_out_channels=256,
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(loss_weight=120.0, type='GIoULoss'),
                loss_cls=dict(
                    loss_weight=12.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=dict(num_groups=32, type='GN'),
                num_classes=80,
                num_shared_convs=4,
                num_shared_fcs=1,
                reg_class_agnostic=True,
                reg_decoded_bbox=True,
                roi_feat_size=7,
                type='ConvFCBBoxHead'),
            bbox_roi_extractor=dict(
                featmap_strides=[
                    4,
                    8,
                    16,
                    32,
                    64,
                ],
                finest_scale=56,
                out_channels=256,
                roi_layer=dict(
                    output_size=7, sampling_ratio=0, type='RoIAlign'),
                type='SingleRoIExtractor'),
            type='CoStandardRoIHead'),
    ],
    rpn_head=dict(
        anchor_generator=dict(
            octave_base_scale=4,
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales_per_octave=3,
            strides=[
                4,
                8,
                16,
                32,
                64,
                128,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=12.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=12.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=[
        dict(max_per_img=1000, nms=dict(iou_threshold=0.8, type='soft_nms')),
        dict(
            rcnn=dict(
                mask_thr_binary=0.5,
                max_per_img=1000,
                nms=dict(iou_threshold=0.5, type='soft_nms'),
                score_thr=0.0),
            rpn=dict(
                max_per_img=2000,
                min_bbox_size=0,
                nms=dict(iou_threshold=0.9, type='nms'),
                nms_pre=8000)),
        dict(
            max_per_img=100,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.6, type='soft_nms'),
            nms_pre=1000,
            score_thr=0.0),
    ],
    train_cfg=[
        dict(
            assigner=dict(
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                iou_cost=dict(iou_mode='giou', type='IoUCost', weight=2.0),
                reg_cost=dict(
                    box_format='xywh', type='BBoxL1Cost', weight=5.0),
                type='HungarianAssigner')),
        dict(
            rcnn=dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.5,
                    neg_iou_thr=0.5,
                    pos_iou_thr=0.5,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            rpn=dict(
                allowed_border=-1,
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=True,
                    min_pos_iou=0.3,
                    neg_iou_thr=0.3,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=False,
                    neg_pos_ub=-1,
                    num=256,
                    pos_fraction=0.5,
                    type='RandomSampler')),
            rpn_proposal=dict(
                max_per_img=1000,
                min_bbox_size=0,
                nms=dict(iou_threshold=0.7, type='nms'),
                nms_pre=4000)),
        dict(
            allowed_border=-1,
            assigner=dict(topk=9, type='ATSSAssigner'),
            debug=False,
            pos_weight=-1),
    ],
    type='CoDETR')
num_dec_layer = 6
optim_wrapper = dict(
    _delete_=True,
    optimizer=dict(lr=5e-05, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(custom_keys=dict(backbone=dict(lr_mult=0.1))),
    type='OptimWrapper')
pretrained = None
residual_block_indexes = []
resume = False
resume_from = None
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='json/val_coco.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='../../tld_db',
        metainfo=dict(
            classes=(
                'veh_go',
                'veh_goLeft',
                'veh_noSign',
                'veh_stop',
                'veh_stopLeft',
                'veh_stopWarning',
                'veh_warning',
                'ped_go',
                'ped_noSign',
                'ped_stop',
                'bus_go',
                'bus_noSign',
                'bus_stop',
                'bus_warning',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='../../tld_db/json/val_coco.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            1280,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(size_divisor=32, type='Pad'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    _delete_=True, max_epochs=1, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=1,
    dataset=dict(
        ann_file='json/train_coco.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='../../tld_db',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'veh_go',
                'veh_goLeft',
                'veh_noSign',
                'veh_stop',
                'veh_stopLeft',
                'veh_stopWarning',
                'veh_warning',
                'ped_go',
                'ped_noSign',
                'ped_stop',
                'bus_go',
                'bus_noSign',
                'bus_stop',
                'bus_warning',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(flip_ratio=0.5, type='RandomFlip'),
    dict(
        policies=[
            [
                dict(
                    img_scale=[
                        (
                            480,
                            2048,
                        ),
                        (
                            512,
                            2048,
                        ),
                        (
                            544,
                            2048,
                        ),
                        (
                            576,
                            2048,
                        ),
                        (
                            608,
                            2048,
                        ),
                        (
                            640,
                            2048,
                        ),
                        (
                            672,
                            2048,
                        ),
                        (
                            704,
                            2048,
                        ),
                        (
                            736,
                            2048,
                        ),
                        (
                            768,
                            2048,
                        ),
                        (
                            800,
                            2048,
                        ),
                        (
                            832,
                            2048,
                        ),
                        (
                            864,
                            2048,
                        ),
                        (
                            896,
                            2048,
                        ),
                        (
                            928,
                            2048,
                        ),
                        (
                            960,
                            2048,
                        ),
                        (
                            992,
                            2048,
                        ),
                        (
                            1024,
                            2048,
                        ),
                        (
                            1056,
                            2048,
                        ),
                        (
                            1088,
                            2048,
                        ),
                        (
                            1120,
                            2048,
                        ),
                        (
                            1152,
                            2048,
                        ),
                        (
                            1184,
                            2048,
                        ),
                        (
                            1216,
                            2048,
                        ),
                        (
                            1248,
                            2048,
                        ),
                        (
                            1280,
                            2048,
                        ),
                    ],
                    keep_ratio=True,
                    multiscale_mode='value',
                    type='Resize'),
            ],
            [
                dict(
                    img_scale=[
                        (
                            400,
                            4200,
                        ),
                        (
                            500,
                            4200,
                        ),
                        (
                            600,
                            4200,
                        ),
                    ],
                    keep_ratio=True,
                    multiscale_mode='value',
                    type='Resize'),
                dict(
                    allow_negative_crop=True,
                    crop_size=(
                        384,
                        600,
                    ),
                    crop_type='absolute_range',
                    type='RandomCrop'),
                dict(
                    img_scale=[
                        (
                            480,
                            2048,
                        ),
                        (
                            512,
                            2048,
                        ),
                        (
                            544,
                            2048,
                        ),
                        (
                            576,
                            2048,
                        ),
                        (
                            608,
                            2048,
                        ),
                        (
                            640,
                            2048,
                        ),
                        (
                            672,
                            2048,
                        ),
                        (
                            704,
                            2048,
                        ),
                        (
                            736,
                            2048,
                        ),
                        (
                            768,
                            2048,
                        ),
                        (
                            800,
                            2048,
                        ),
                        (
                            832,
                            2048,
                        ),
                        (
                            864,
                            2048,
                        ),
                        (
                            896,
                            2048,
                        ),
                        (
                            928,
                            2048,
                        ),
                        (
                            960,
                            2048,
                        ),
                        (
                            992,
                            2048,
                        ),
                        (
                            1024,
                            2048,
                        ),
                        (
                            1056,
                            2048,
                        ),
                        (
                            1088,
                            2048,
                        ),
                        (
                            1120,
                            2048,
                        ),
                        (
                            1152,
                            2048,
                        ),
                        (
                            1184,
                            2048,
                        ),
                        (
                            1216,
                            2048,
                        ),
                        (
                            1248,
                            2048,
                        ),
                        (
                            1280,
                            2048,
                        ),
                    ],
                    keep_ratio=True,
                    multiscale_mode='value',
                    override=True,
                    type='Resize'),
            ],
        ],
        type='AutoAugment'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(size_divisor=32, type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_bboxes',
        'gt_labels',
    ], type='Collect'),
]
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='json/val_coco.json',
        backend_args=None,
        data_prefix=dict(img=''),
        data_root='../../tld_db',
        metainfo=dict(
            classes=(
                'veh_go',
                'veh_goLeft',
                'veh_noSign',
                'veh_stop',
                'veh_stopLeft',
                'veh_stopWarning',
                'veh_warning',
                'ped_go',
                'ped_noSign',
                'ped_stop',
                'bus_go',
                'bus_noSign',
                'bus_stop',
                'bus_warning',
            )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='../../tld_db/json/val_coco.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='WandbVisBackend'),
    ])
window_block_indexes = [
    0,
    1,
    2,
    4,
    5,
    6,
    8,
    9,
    10,
    12,
    13,
    14,
    16,
    17,
    18,
    20,
    21,
    22,
    24,
    25,
    26,
]
work_dir = '../work_dirs/co_dino_5scale_vit_large_coco_custom_'
